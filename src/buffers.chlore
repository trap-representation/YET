struct buffer
  l: size
  l: offset
  l: linum
  l: disp_start
  l: dslinum
  ui: max_dispchars
  p: buf_contents!

struct buffers
  buffer: buffer0
  buffer: buffer1
  buffer: buffer2
  buffer: buffer3
  buffer: buffer4!

set BUF_N 5

:inc_buf
pushui BUF_N get2 pushui 1 addui remui write2
ret

:dec_buf
pushui BUF_N pushui 1 get2 subl reml pushui BUF_N addl pushui BUF_N swap remui write2
ret

:get_buf_ptr
get2
dup pushui 0 pushp is_buf0 jeq
dup pushui 1 pushp is_buf1 jeq
dup pushui 2 pushp is_buf2 jeq
dup pushui 3 pushp is_buf3 jeq
dup pushui 4 pushp is_buf4 jeq
pushp unexpected_buffer jmp

:is_buf0
pop get5 +buffers.buffer0 addp swap ret

:is_buf1
pop get5 +buffers.buffer1 addp swap ret

:is_buf2
pop get5 +buffers.buffer2 addp swap ret

:is_buf3
pop get5 +buffers.buffer3 addp swap ret

:is_buf4
pop get5 +buffers.buffer4 addp swap ret

:allocate_bufs
swap

sizeof buffers pushp aseg call ;allocate the buffers
get0 pushp allocate_bufs_allocation_failure jnz ;check if allocation was successful

swap over +buffers.buffer0.buf_contents addp storep
get3 over +buffers.buffer0.size addp storel
pushui 512 over +buffers.buffer0.max_dispchars addp storeui
pushi 0 over +buffers.buffer0.offset addp storel
pushi 0 over +buffers.buffer0.disp_start addp storel
pushi 1 over +buffers.buffer0.linum addp storel
pushi 1 over +buffers.buffer0.dslinum addp storel

pushp NULL over +buffers.buffer1.buf_contents addp storep
pushi 0 over +buffers.buffer1.size addp storel
pushui 512 over +buffers.buffer1.max_dispchars addp storeui
pushi 0 over +buffers.buffer1.offset addp storel
pushi 0 over +buffers.buffer1.disp_start addp storel
pushi 1 over +buffers.buffer1.linum addp storel
pushi 1 over +buffers.buffer1.dslinum addp storel

pushp NULL over +buffers.buffer2.buf_contents addp storep
pushi 0 over +buffers.buffer2.size addp storel
pushui 512 over +buffers.buffer2.max_dispchars addp storeui
pushi 0 over +buffers.buffer2.offset addp storel
pushi 0 over +buffers.buffer2.disp_start addp storel
pushi 1 over +buffers.buffer2.linum addp storel
pushi 1 over +buffers.buffer2.dslinum addp storel

pushp NULL over +buffers.buffer3.buf_contents addp storep
pushi 0 over +buffers.buffer3.size addp storel
pushui 512 over +buffers.buffer3.max_dispchars addp storeui
pushi 0 over +buffers.buffer3.offset addp storel
pushi 0 over +buffers.buffer3.disp_start addp storel
pushi 1 over +buffers.buffer3.linum addp storel
pushi 1 over +buffers.buffer3.dslinum addp storel

pushp NULL over +buffers.buffer4.buf_contents addp storep
pushi 0 over +buffers.buffer4.size addp storel
pushui 512 over +buffers.buffer4.max_dispchars addp storeui
pushi 0 over +buffers.buffer4.offset addp storel
pushi 0 over +buffers.buffer4.disp_start addp storel
pushi 1 over +buffers.buffer4.linum addp storel
pushi 1 over +buffers.buffer4.dslinum addp storel

swap
ret

:write_buffer
pushc 0x1B pushp putchar call
pushp "[2J" pushp putstr call ;clear the entire screen
pushc 0x1B pushp putchar call
pushp "[H" pushp putstr call ;move the cursor to the top left corner

pushp get_buf_ptr call write3

get3 +buffer.buf_contents addp loadp pushp NULL pushp write_buffer_buf_is_null jeq

get3 dup +buffer.disp_start addp loadl swap +buffer.offset addp loadl pushp dec_disp_start jls
pushp write_buffer_continue1 jmp

:dec_disp_start
get3 dup +buffer.offset addp loadl swap +buffer.disp_start addp storel
get3 dup +buffer.linum addp loadl swap +buffer.dslinum addp storel
pushp write_first_half jmp

:write_buffer_continue1
get3 dup dup +buffer.disp_start addp loadl swap +buffer.offset addp loadl subl swap +buffer.max_dispchars addp loadui pushp inc_disp_start jls
pushp write_first_half jmp

:inc_disp_start
get3 dup +buffer.offset addp loadl swap +buffer.disp_start addp storel
get3 dup +buffer.linum addp loadl swap +buffer.dslinum addp storel

:write_first_half
get3 dup dup +buffer.linum addp loadl swap +buffer.dslinum addp loadl subl swap +buffer.dslinum addp loadl pushp "[%l:%l] " pushp putfmt call
get3 dup +buffer.disp_start addp loadl swap +buffer.offset addp loadl subl
get3 dup +buffer.buf_contents addp loadp swap +buffer.disp_start addp loadl swap addp
get3 +buffer.dslinum addp loadl
get3 +buffer.linum addp loadl
pushp linum_putnstr call
get0 pushi EOF pushp stdout_write_failure jeq
pushp write_posin jmp

:write_posin
pushc '|'
pushp putchar call
get0 pushi EOF pushp stdout_write_failure jeq

get3 dup dup +buffer.disp_start addp loadl swap +buffer.offset addp loadl subl swap +buffer.max_dispchars addp loadui subl
get3 +buffer.offset addp loadl addl
get3 +buffer.size addp loadl pushp write_all jls

get3 dup dup +buffer.disp_start addp loadl swap +buffer.offset addp loadl subl swap +buffer.max_dispchars addp loadui subl
get3 dup +buffer.buf_contents addp loadp swap +buffer.offset addp loadl swap addp
get3 +buffer.linum addp loadl
get3 +buffer.linum addp loadl
pushp linum_putnstr call
get0 pushi EOF pushp stdout_write_failure jeq

pushp "\n[...]" pushp putstr call
get0 pushi EOF pushp stdout_write_failure jeq

pushp write_buffer_end jmp

:write_all
get3 dup +buffer.size addp loadl swap +buffer.offset addp loadl swap subl
get3 dup +buffer.buf_contents addp loadp swap +buffer.offset addp loadl swap addp
get3 +buffer.linum addp loadl
get3 +buffer.linum addp loadl
pushp linum_putnstr call
get0 pushi EOF pushp stdout_write_failure jeq
pushp write_buffer_end jmp

:write_buffer_buf_is_null
pushc '|'
pushp putchar call
get0 pushi EOF pushp stdout_write_failure jeq

:write_buffer_end
ret

:linum_putnstr
;offset contents linum rel_linum retaddr
write4 ;offset contents linum rel_linum
write7 ;offset contents linum
swap ;offset linum contents
get4 ;offset linum contents retaddr
swap ;offset linum retaddr contents
write4 ;offset linum retaddr
swap ;offset retaddr linum
get4 ;offset retaddr linum contents
swap ;offset retaddr contents linum
write6 ;offset retaddr contents
write4 ;offset retaddr
swap ;retaddr offset
get4 ;retaddr offset contents
get7 write4

pushi 0 write7 ;this is the loop counter
:linum_putnstr_loop_until_end
over get7 pushp linum_putnstr_end jeq
get7 over addp
loadc dup pushp putchar call
pushc '\n' pushp linum_putnstr_write_linum_and_continue jeq
get7 pushi 1 addl write7
pushp linum_putnstr_loop_until_end jmp

:linum_putnstr_write_linum_and_continue
get6 pushi 1 addl write6
get4 get6 subl get6 pushp "[%l:%l] " pushp putfmt call
get7 pushi 1 addl write7
pushp linum_putnstr_loop_until_end jmp

:linum_putnstr_end
pop pop

ret

