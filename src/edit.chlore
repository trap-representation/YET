import "stdlib.chloreh"
import "io.chloreh"
import "alloc2.chloreh"
import "string.chloreh"
import "stddef.chloreh"
import "types.chloreh"

import "/usr/local/bin/_yet/buffers_structs.chloreh"

set BUF_SIZE 1048576
set MAX_PATHSIZE 4096

:read_input
  write5
  pushp NULL ;this is a pointer to a location in the heap where we will be storing the bytes read from the input
  pushi 0 write3 ;this is the size of the buffer

  pushl BUF_SIZE
  pushp aseg call ;allocate a buffer of size BUF_SIZE bytes
  ;we will be using this to read the input in chunks
  get0 pushp read_input_allocation_failure jnz ;check if the allocation was successful

  :read_loop
    get2 ;get the input file descriptor
    over
    pushl BUF_SIZE
    pushp readf call
    get0 dup pushi -1 pushp read_input_read_failure jeq ;check if the read was successful
    write4 ;store the size of the chunk we just read in block 4

    get3 pushl L_MAX subl get4 pushp input_too_large jgt

    swap ;dest src -- src dest
    get4 get3 addl ;add the size of the buffer to the size of the chunk we just read
    swap pushp rseg call
    get0 pushp read_input_allocation_failure_2 jnz ;check if reallocation was successful

    over over ;src dest -- src dest src dest
    get3 swap addp ;this is equivalent to evaluating &buf[block_3] in C

    swap ;src dest -- dest src
    get4
    pushp memcpy call

    get3 get4 addl write3 ;add the size of the chunk read to the size of the buffer

    swap ;src dest -- dest src

    get4 pushl BUF_SIZE pushp read_loop_end jgt ;if the number of items read was <= BUF_SIZE, that means that we just read the last chunk from the input
    pushp read_loop jmp
    
    :read_loop_end
      pushp flush call
      pushi 0
      get5

  ret

:text_editor
  swap
  get2 pushp closef call

  pushi 0 write2 ;this is the buffer we're currently working on

  pushi 0 swap ;this is the repeat counter
  pushi EOF swap

  :write_buffer_and_continue
  pushp write_buffer call

  pushp "\n\%" pushp putstr call
  get0 pushi EOF pushp stdout_write_failure jeq

  :get_command_character
  over pushi EOF pushp repeat_task jne

  :repeat_task
  write3
  swap dup pushp repeat_count_zero jz
  pushi 1 swap subl
  swap
  get3
  over
  pushp do_task jmp

  :repeat_count_zero
  swap pop pushi EOF get3

  :get_from_stdin
  pushp getchar call
  get0 pushi EOF pushp get_from_stdin_stdin_read_failure jeq

  :do_task
  dup pushc 'f' pushp task_f jeq
  dup pushc 'b' pushp task_b jeq
  dup pushc 'l' pushp task_l jeq
  dup pushc 'n' pushp task_n jeq
  dup pushc 'p' pushp task_p jeq
  dup pushc 'd' pushp task_d jeq
  dup pushc '#' pushp task_pound jeq
  dup pushc 'u' pushp task_u jeq
  dup pushc 'r' pushp task_r jeq
  dup pushc 'm' pushp task_m jeq
  dup pushc 'c' pushp task_c jeq
  dup pushc 'y' pushp task_y jeq
  dup pushc 'k' pushp task_k jeq
  dup pushc 'z' pushp task_z jeq
  dup pushc 'e' pushp task_e jeq
  dup pushc ';' pushp task_semicolon jeq
  dup pushc 'v' pushp task_v jeq
  dup pushc '.' pushp task_dot jeq
  dup pushc ',' pushp task_comma jeq
  dup pushc ':' pushp task_colon jeq
  dup pushc '=' pushp task_equal jeq
  dup pushc 'w' pushp task_w jeq
  dup pushc '~' pushp task_tilde jeq
  dup pushc '$' pushp task_dollar jeq
  dup pushc '@' pushp task_at jeq
  dup pushc 'q' pushp task_q jeq
  dup pushi EOF pushp ignore jeq
  dup pushp isspace call pushp ignore jnz
  pop pushp noassigned_task jmp

  :ignore
    pop

    pushp get_command_character jmp

  :noassigned_task
    pushp "YET: no task assigned to character\n" pushp putstre call

    pushp get_command_character jmp

  :task_q
    pop
    pushp flush call
    pushp flush_bufs call
    pushp mem_close call
    pop pop
    pushi 0 swap
    ret

  :task_e
    pop

    swap pop swap pop
    pushp get_integer_from_stdin call
    ;integer character_that_wasn't_read
    write3 swap get3 swap

    pushp get_command_character jmp

  :task_c
    pop

    pushp get_buf_ptr call

    pushp inc_buf call
    pushp get_buf_ptr call

    swap +buffer.max_dispchars addp loadui over +buffer.max_dispchars addp storeui
    pushp NULL over +buffer.buf_contents addp dup loadp pushp flush call storep
    pushl 0 over +buffer.size addp storel
    pushl 0 over +buffer.offset addp storel
    pushl 0 over +buffer.disp_start addp storel
    pushl 1 over +buffer.linum addp storel
    pushl 1 swap +buffer.dslinum addp storel

    pushp get_command_character jmp

  :task_at
    pop

    swap pop swap pop
    pushp get_integer_from_stdin call swap write4
    pushi 1 swap ;1 character_that_wasn't_read
    write3 swap get3 swap
    get4
    get5 +buffers.buffer0.max_dispchars addp over swap storeui
    get5 +buffers.buffer1.max_dispchars addp over swap storeui
    get5 +buffers.buffer2.max_dispchars addp over swap storeui
    get5 +buffers.buffer3.max_dispchars addp over swap storeui
    get5 +buffers.buffer4.max_dispchars addp storeui

    pushp get_command_character jmp

  :task_dollar
    pop

    swap pop swap pop
    pushp get_integer_from_stdin call swap write4
    pushi 1 swap ;1 character_that_wasn't_read
    write3 swap get3 swap
    get4
    pushp get_buf_ptr call +buffer.max_dispchars addp storeui

    pushp get_command_character jmp

  :task_l
    pop

    pushp write_buffer_and_continue jmp

  :task_w
    pop

    dup pushi O_WRONLYT
    pushp openf call
    dup pushi -1 pushp open_failure_wr jeq

    pushp get_buf_ptr call +buffer.buf_contents addp loadp pushp NULL pushp task_w_continue jeq

    dup
    pushp get_buf_ptr call dup +buffer.buf_contents addp loadp
    swap +buffer.size addp loadl
    pushp writef call
    get0 pushi -1 pushp write_failure jeq

    :task_w_continue
      pushp closef call
      pushp "YET: written\n" pushp putstr call
      pushp get_command_character jmp

  :task_equal
    pop

    pushl MAX_PATHSIZE pushi 1 addl
    pushp aseg call
    get0 pushp task_equal_allocation_failure jnz ;check if the allocation was successful

    dup

    pushl MAX_PATHSIZE
    over
    pushp getstr call
    get0 pushi EOF pushp task_equal_stdin_read_failure jeq

    pushi O_WRONLYT
    pushp openf call
    dup pushi -1 pushp open_failure_wr jeq

    swap pushp flush call

    pushp get_buf_ptr call +buffer.buf_contents addp loadp pushp NULL pushp task_equal_continue jeq

    dup
    pushp get_buf_ptr call dup +buffer.buf_contents addp loadp
    swap +buffer.size addp loadl
    pushp writestrf call
    get0 pushi -1 pushp write_failure jeq

    :task_equal_continue

      pushp closef call

      pushp "YET: written\n" pushp putstr call

      pushp get_command_character jmp

  :task_r
    pop

    pushp inc_buf call
    pushp get_buf_ptr call +buffer.buf_contents addp loadp pushp NULL pushp redo_noinf jeq
    pushp get_command_character jmp

    :redo_noinf
      pushp dec_buf call
      pushp "YET: no further redo information\n" pushp putstre call
      pushp get_command_character jmp

  :task_u
    pop

    pushp dec_buf call
    pushp get_buf_ptr call +buffer.buf_contents addp loadp pushp NULL pushp undo_noinf jeq
    pushp get_command_character jmp

    :undo_noinf
      pushp inc_buf call
      pushp "YET: no further undo information\n" pushp putstre call
      pushp get_command_character jmp

  :task_d
    pop

    pushp get_buf_ptr call
    dup +buffer.size addp loadl pushi 1 swap subl

    pushp aseg call
    get0 pushp task_d_allocation_failure jnz ;check if the allocation was successful

    pushp inc_buf call pushp get_buf_ptr call +buffer.buf_contents addp dup loadp pushp flush call storep

    pushp get_buf_ptr call +buffer.buf_contents addp loadp
    over dup +buffer.buf_contents addp loadp
    swap +buffer.offset addp loadl
    pushp memcpy call

    pushp get_buf_ptr call +buffer.buf_contents addp loadp over +buffer.offset addp loadl swap addp
    over dup +buffer.buf_contents addp loadp over +buffer.offset addp loadl pushi 1 addl swap addp
    swap dup +buffer.offset addp loadl pushi 1 addl swap +buffer.size addp loadl subl
    pushp memcpy call

    dup +buffer.size addp loadl pushi 1 swap subl pushp get_buf_ptr call +buffer.size addp storel
    dup +buffer.offset addp loadl pushp get_buf_ptr call +buffer.offset addp storel
    dup +buffer.disp_start addp loadl pushp get_buf_ptr call +buffer.disp_start addp storel
    dup +buffer.linum addp loadl pushp get_buf_ptr call +buffer.linum addp storel
    dup +buffer.dslinum addp loadl pushp get_buf_ptr call +buffer.dslinum addp storel
    +buffer.max_dispchars addp loadui pushp get_buf_ptr call +buffer.max_dispchars addp storeui

    pushp get_command_character jmp

  :task_tilde
    pop

    pushp get_buf_ptr call
    dup +buffer.size addp loadl pushi 1 addl

    pushp aseg call
    get0 pushp task_tilde_allocation_failure jnz ;check if the allocation was successful

    pushp inc_buf call pushp get_buf_ptr call +buffer.buf_contents addp dup loadp pushp flush call storep

    pushp get_buf_ptr call +buffer.buf_contents addp loadp
    over dup +buffer.buf_contents addp loadp
    swap +buffer.offset addp loadl
    pushp memcpy call

    pushp get_buf_ptr call +buffer.buf_contents addp loadp over +buffer.offset addp loadl swap addp
    pushp "\n"
    pushui 1
    pushp memcpy call

    pushp get_buf_ptr call +buffer.buf_contents addp loadp over +buffer.offset addp loadl pushi 1 addl swap addp
    over dup +buffer.buf_contents addp loadp over +buffer.offset addp loadl swap addp
    swap dup +buffer.offset addp loadl swap +buffer.size addp loadl subl
    pushp memcpy call

    dup +buffer.size addp loadl pushi 1 addl pushp get_buf_ptr call +buffer.size addp storel
    dup +buffer.offset addp loadl pushp get_buf_ptr call +buffer.offset addp storel
    dup +buffer.disp_start addp loadl pushp get_buf_ptr call +buffer.disp_start addp storel
    dup +buffer.linum addp loadl pushp get_buf_ptr call +buffer.linum addp storel
    dup +buffer.dslinum addp loadl pushp get_buf_ptr call +buffer.dslinum addp storel
    +buffer.max_dispchars addp loadui pushp get_buf_ptr call +buffer.max_dispchars addp storeui

    pushp get_command_character jmp

  :task_f
    pop

    pushp get_buf_ptr call write3
    get3 dup +buffer.offset addp loadl swap +buffer.size addp loadl pushp get_command_character jeq
    get3 dup +buffer.buf_contents addp loadp swap +buffer.offset addp loadl swap addp loadc pushc '\n' pushp task_f_is_newline jeq
    pushp task_f_continue jmp

    :task_f_is_newline
      get3 +buffer.linum addp loadl pushl L_MAX pushp too_many_newlines jeq
      get3 +buffer.linum addp dup loadl pushi 1 addl swap storel

    :task_f_continue
      get3 +buffer.offset addp dup loadl pushi 1 addl swap storel
      pushp get_command_character jmp

  :task_b
    pop

    pushp get_buf_ptr call write3
    get3 +buffer.offset addp loadl pushi 0 pushp get_command_character jeq
    get3 +buffer.offset addp dup loadl pushi 1 swap subl swap storel
    get3 dup +buffer.buf_contents addp loadp swap +buffer.offset addp loadl swap addp loadc pushc '\n' pushp task_b_is_newline jeq
    pushp get_command_character jmp

    :task_b_is_newline
      get3 +buffer.linum addp dup loadl pushi 1 swap subl swap storel
      pushp get_command_character jmp

  :task_m
    pop

    pushp get_buf_ptr call write3

    :task_m_loop_until_newline0
      get3 +buffer.offset addp loadl pushi 0 pushp get_command_character jeq
      get3 +buffer.offset addp dup loadl pushi 1 swap subl swap storel
      get3 dup +buffer.buf_contents addp loadp swap +buffer.offset addp loadl swap addp loadc pushc '\n' pushp task_m_loop_until_newline0_is_newline jeq
      pushp task_m_loop_until_newline0_continue jmp

      :task_m_loop_until_newline0_is_newline
        get3 +buffer.linum addp dup loadl pushi 1 swap subl swap storel

      :task_m_loop_until_newline0_continue
        get3 dup +buffer.offset addp loadl swap +buffer.buf_contents addp loadp addp
        loadc pushc '\n' pushp task_m_loop_until_newline1 jeq
        pushp task_m_loop_until_newline0 jmp

        :task_m_loop_until_newline1
          get3 +buffer.offset addp loadl pushi 0 pushp get_command_character jeq
          get3 +buffer.offset addp dup loadl pushi 1 swap subl swap storel
          get3 dup +buffer.buf_contents addp loadp swap +buffer.offset addp loadl swap addp loadc pushc '\n' pushp task_m_loop_until_newline1_is_newline jeq
          pushp task_m_loop_until_newline1_continue jmp

          :task_m_loop_until_newline1_is_newline
            get3 +buffer.linum addp dup loadl pushi 1 swap subl swap storel

          :task_m_loop_until_newline1_continue
            get3 dup +buffer.offset addp loadl swap +buffer.buf_contents addp loadp addp
            loadc pushc '\n' pushp task_m_loop_until_newline2 jeq
            pushp task_m_loop_until_newline1 jmp

            :task_m_loop_until_newline2
              get3 +buffer.offset addp loadl pushi 0 pushp get_command_character jeq
              get3 +buffer.offset addp dup loadl pushi 1 swap subl swap storel
              get3 dup +buffer.buf_contents addp loadp swap +buffer.offset addp loadl swap addp loadc pushc '\n' pushp task_m_loop_until_newline2_is_newline jeq
              pushp task_m_loop_until_newline2_continue jmp

              :task_m_loop_until_newline2_is_newline
                get3 +buffer.linum addp dup loadl pushi 1 swap subl swap storel

              :task_m_loop_until_newline2_continue
                get3 dup +buffer.offset addp loadl swap +buffer.buf_contents addp loadp addp
                loadc pushc '\n' pushp task_m_loop_until_newline3 jeq
                pushp task_m_loop_until_newline2 jmp

                :task_m_loop_until_newline3
                  get3 +buffer.offset addp loadl pushi 0 pushp get_command_character jeq
                  get3 +buffer.offset addp dup loadl pushi 1 swap subl swap storel
                  get3 dup +buffer.buf_contents addp loadp swap +buffer.offset addp loadl swap addp loadc pushc '\n' pushp task_m_loop_until_newline3_is_newline jeq
                  pushp task_m_loop_until_newline3_continue jmp

                  :task_m_loop_until_newline3_is_newline
                    get3 +buffer.linum addp dup loadl pushi 1 swap subl swap storel

                  :task_m_loop_until_newline3_continue
                    get3 dup +buffer.offset addp loadl swap +buffer.buf_contents addp loadp addp
                    loadc pushc '\n' pushp task_m_loop_until_newline4 jeq
                    pushp task_m_loop_until_newline3 jmp

                    :task_m_loop_until_newline4
                      get3 +buffer.offset addp loadl pushi 0 pushp get_command_character jeq
                      get3 +buffer.offset addp dup loadl pushi 1 swap subl swap storel
                      get3 dup +buffer.buf_contents addp loadp swap +buffer.offset addp loadl swap addp loadc pushc '\n' pushp task_m_loop_until_newline4_is_newline jeq
                      pushp task_m_loop_until_newline4_continue jmp

                      :task_m_loop_until_newline4_is_newline
                        get3 +buffer.linum addp dup loadl pushi 1 swap subl swap storel

                      :task_m_loop_until_newline4_continue
                        get3 dup +buffer.offset addp loadl swap +buffer.buf_contents addp loadp addp
                        loadc pushc '\n' pushp get_command_character jeq
                        pushp task_m_loop_until_newline4 jmp

  :task_comma
    pop

    pushp get_buf_ptr call write3

    :task_comma_loop_until_end
      get3 dup +buffer.offset addp loadl swap +buffer.size addp loadl pushp get_command_character jeq
      get3 dup +buffer.buf_contents addp loadp swap +buffer.offset addp loadl swap addp loadc pushc '\n' pushp task_comma_loop_until_end_is_newline jeq
      pushp task_comma_loop_until_end_continue jmp

      :task_comma_loop_until_end_is_newline
        get3 +buffer.linum addp loadl pushl L_MAX pushp too_many_newlines jeq
        get3 +buffer.linum addp dup loadl pushi 1 addl swap storel

      :task_comma_loop_until_end_continue
        get3 +buffer.offset addp dup loadl pushi 1 addl swap storel
        pushp task_comma_loop_until_end jmp

  :task_dot
    pop

    pushp get_buf_ptr call write3

    :task_dot_loop_until_beginning
      get3 +buffer.offset addp loadl pushi 0 pushp get_command_character jeq
      get3 +buffer.offset addp dup loadl pushi 1 swap subl swap storel
      get3 dup +buffer.buf_contents addp loadp swap +buffer.offset addp loadl swap addp loadc pushc '\n' pushp task_dot_loop_until_beginning_is_newline jeq
      pushp task_dot_loop_until_beginning jmp

      :task_dot_loop_until_beginning_is_newline
        get3 +buffer.linum addp dup loadl pushi 1 swap subl swap storel
        pushp task_dot_loop_until_beginning jmp

  :task_semicolon
    pop

    pushp get_buf_ptr call write3

    :task_semicolon_loop_until_space
      get3 +buffer.offset addp loadl pushi 0 pushp get_command_character jeq
      get3 +buffer.offset addp dup loadl pushi 1 swap subl swap storel
      get3 dup +buffer.buf_contents addp loadp swap +buffer.offset addp loadl swap addp loadc pushc '\n' pushp task_semicolon_loop_until_space_is_newline jeq
      pushp task_semicolon_loop_until_space_continue jmp

      :task_semicolon_loop_until_space_is_newline
        get3 +buffer.linum addp dup loadl pushi 1 swap subl swap storel

      :task_semicolon_loop_until_space_continue
        get3 dup +buffer.offset addp loadl swap +buffer.buf_contents addp loadp addp
        loadc pushp isspace call pushp get_command_character jnz
        pushp task_semicolon_loop_until_space jmp

  :task_p
    pop

    pushp get_buf_ptr call write3

    :task_p_loop_until_newline
      get3 +buffer.offset addp loadl pushi 0 pushp get_command_character jeq
      get3 +buffer.offset addp dup loadl pushi 1 swap subl swap storel
      get3 dup +buffer.buf_contents addp loadp swap +buffer.offset addp loadl swap addp loadc pushc '\n' pushp task_p_loop_until_newline_is_newline jeq
      pushp task_p_loop_until_newline_continue jmp

      :task_p_loop_until_newline_is_newline
        get3 +buffer.linum addp dup loadl pushi 1 swap subl swap storel

      :task_p_loop_until_newline_continue
        get3 dup +buffer.offset addp loadl swap +buffer.buf_contents addp loadp addp
        loadc pushc '\n' pushp get_command_character jeq
        pushp task_p_loop_until_newline jmp

  :task_v
    pop

    pushp get_buf_ptr call write3

    :task_v_loop_until_newline0
      get3 dup +buffer.offset addp loadl swap +buffer.size addp loadl pushp get_command_character jeq
      get3 dup +buffer.buf_contents addp loadp swap +buffer.offset addp loadl swap addp loadc pushc '\n' pushp task_v_loop_until_newline0_is_newline jeq
      pushp task_v_loop_until_newline0_continue jmp

      :task_v_loop_until_newline0_is_newline
        get3 +buffer.linum addp loadl pushl L_MAX pushp too_many_newlines jeq
        get3 +buffer.linum addp dup loadl pushi 1 addl swap storel

      :task_v_loop_until_newline0_continue
        get3 +buffer.offset addp dup loadl pushi 1 addl swap storel
        get3 dup +buffer.offset addp loadl swap +buffer.buf_contents addp loadp addp
        loadc pushc '\n' pushp task_v_loop_until_newline1 jeq
        pushp task_v_loop_until_newline0 jmp

        :task_v_loop_until_newline1
          get3 dup +buffer.offset addp loadl swap +buffer.size addp loadl pushp get_command_character jeq
          get3 dup +buffer.buf_contents addp loadp swap +buffer.offset addp loadl swap addp loadc pushc '\n' pushp task_v_loop_until_newline1_is_newline jeq
          pushp task_v_loop_until_newline1_continue jmp

          :task_v_loop_until_newline1_is_newline
            get3 +buffer.linum addp loadl pushl L_MAX pushp too_many_newlines jeq
            get3 +buffer.linum addp dup loadl pushi 1 addl swap storel

          :task_v_loop_until_newline1_continue
            get3 +buffer.offset addp dup loadl pushi 1 addl swap storel
            get3 dup +buffer.offset addp loadl swap +buffer.buf_contents addp loadp addp
            loadc pushc '\n' pushp task_v_loop_until_newline2 jeq
            pushp task_v_loop_until_newline1 jmp

            :task_v_loop_until_newline2
              get3 dup +buffer.offset addp loadl swap +buffer.size addp loadl pushp get_command_character jeq
              get3 dup +buffer.buf_contents addp loadp swap +buffer.offset addp loadl swap addp loadc pushc '\n' pushp task_v_loop_until_newline2_is_newline jeq
              pushp task_v_loop_until_newline2_continue jmp

              :task_v_loop_until_newline2_is_newline
                get3 +buffer.linum addp loadl pushl L_MAX pushp too_many_newlines jeq
                get3 +buffer.linum addp dup loadl pushi 1 addl swap storel

              :task_v_loop_until_newline2_continue
                get3 +buffer.offset addp dup loadl pushi 1 addl swap storel
                get3 dup +buffer.offset addp loadl swap +buffer.buf_contents addp loadp addp
                loadc pushc '\n' pushp task_v_loop_until_newline3 jeq
                pushp task_v_loop_until_newline2 jmp

                :task_v_loop_until_newline3
                  get3 dup +buffer.offset addp loadl swap +buffer.size addp loadl pushp get_command_character jeq
                  get3 dup +buffer.buf_contents addp loadp swap +buffer.offset addp loadl swap addp loadc pushc '\n' pushp task_v_loop_until_newline3_is_newline jeq
                  pushp task_v_loop_until_newline3_continue jmp

                  :task_v_loop_until_newline3_is_newline
                    get3 +buffer.linum addp loadl pushl L_MAX pushp too_many_newlines jeq
                    get3 +buffer.linum addp dup loadl pushi 1 addl swap storel

                  :task_v_loop_until_newline3_continue
                    get3 +buffer.offset addp dup loadl pushi 1 addl swap storel
                    get3 dup +buffer.offset addp loadl swap +buffer.buf_contents addp loadp addp
                    loadc pushc '\n' pushp task_v_loop_until_newline4 jeq
                    pushp task_v_loop_until_newline3 jmp

                    :task_v_loop_until_newline4
                      get3 dup +buffer.offset addp loadl swap +buffer.size addp loadl pushp get_command_character jeq
                      get3 dup +buffer.buf_contents addp loadp swap +buffer.offset addp loadl swap addp loadc pushc '\n' pushp task_v_loop_until_newline4_is_newline jeq
                      pushp task_v_loop_until_newline4_continue jmp

                      :task_v_loop_until_newline4_is_newline
                        get3 +buffer.linum addp loadl pushl L_MAX pushp too_many_newlines jeq
                        get3 +buffer.linum addp dup loadl pushi 1 addl swap storel

                      :task_v_loop_until_newline4_continue
                        get3 +buffer.offset addp dup loadl pushi 1 addl swap storel
                        get3 dup +buffer.offset addp loadl swap +buffer.buf_contents addp loadp addp
                        loadc pushc '\n' pushp get_command_character jeq
                        pushp task_v_loop_until_newline4 jmp

  :task_k
    pop

    pushp get_buf_ptr call write3

    get3 +buffer.offset addp loadl

    pushp aseg call
    get0 pushp task_k_allocation_failure jnz ;check if the allocation was successful

    pushp inc_buf call pushp get_buf_ptr call +buffer.buf_contents addp dup loadp pushp flush call storep

    pushp get_buf_ptr call +buffer.buf_contents addp loadp
    get3 dup +buffer.buf_contents addp loadp
    swap +buffer.offset addp loadl
    pushp memcpy call

    get3 +buffer.offset addp loadl write4

    pushp dec_buf call

    :task_k_loop_until_newline
      get4 get3 +buffer.size addp loadl pushp task_k_write_rem jeq
      get4 pushi 1 addl write4
      get4 get3 +buffer.buf_contents addp loadp addp
      loadc pushc '\n' pushp task_k_write_rem jeq
      pushp task_k_loop_until_newline jmp

      :task_k_write_rem
        pushp inc_buf call
        get3 dup +buffer.offset addp loadl get4 subl swap +buffer.size addp loadl subl
        pushp get_buf_ptr call +buffer.buf_contents addp loadp

        pushp rseg call
        pushp get_buf_ptr call +buffer.buf_contents addp storep

        get0 pushp task_k_allocation_failure_2 jnz ;check if the allocation was successful

        pushp get_buf_ptr call +buffer.buf_contents addp loadp get3 +buffer.offset addp loadl swap addp
        get3 +buffer.buf_contents addp loadp get4 swap addp
        get4 get3 +buffer.size addp loadl subl
        pushp memcpy call

        pushp get_buf_ptr call

        get3 dup +buffer.offset addp loadl get4 subl swap +buffer.size addp loadl subl over +buffer.size addp storel
        get3 +buffer.offset addp loadl over +buffer.offset addp storel
        get3 +buffer.disp_start addp loadl over +buffer.disp_start addp storel
        get3 +buffer.linum addp loadl over +buffer.linum addp storel
        get3 +buffer.dslinum addp loadl over +buffer.dslinum addp storel
        get3 +buffer.max_dispchars addp loadui swap +buffer.max_dispchars addp storeui

        pushp get_command_character jmp

  :task_pound
    pop

    :task_pound_read_stdin_loop
      pushp getchar call write3
      get3 pushi EOF pushp get_command_character jeq
      get3 pushc '\n' pushp get_command_character jeq
      pushp task_pound_read_stdin_loop jmp

  :task_y
    pop

    pushp get_buf_ptr call write3

    get3 +buffer.offset addp loadl

    pushp aseg call
    pushp inc_buf call pushp get_buf_ptr call +buffer.buf_contents addp dup loadp pushp flush call storep

    get0 pushp task_y_allocation_failure jnz ;check if the allocation was successful

    pushp get_buf_ptr call +buffer.buf_contents addp loadp
    get3 dup +buffer.buf_contents addp loadp
    swap +buffer.offset addp loadl
    pushp memcpy call

    get3 +buffer.offset addp loadl write4

    pushp dec_buf call

    :task_y_loop_until_space
      get4 get3 +buffer.size addp loadl pushp task_y_write_rem jeq
      get4 pushi 1 addl write4
      get4 get3 +buffer.buf_contents addp loadp addp
      loadc pushp isspace call pushp task_y_write_rem jnz
      pushp task_y_loop_until_space jmp

      :task_y_write_rem
        pushp inc_buf call
        get3 dup +buffer.offset addp loadl get4 subl swap +buffer.size addp loadl subl
        pushp get_buf_ptr call +buffer.buf_contents addp loadp

        pushp rseg call
        pushp get_buf_ptr call +buffer.buf_contents addp storep

        get0 pushp task_y_allocation_failure_2 jnz ;check if the allocation was successful

        pushp get_buf_ptr call +buffer.buf_contents addp loadp get3 +buffer.offset addp loadl swap addp
        get3 +buffer.buf_contents addp loadp get4 swap addp
        get4 get3 +buffer.size addp loadl subl
        pushp memcpy call

        pushp get_buf_ptr call

        get3 dup +buffer.offset addp loadl get4 subl swap +buffer.size addp loadl subl over +buffer.size addp storel
        get3 +buffer.offset addp loadl over +buffer.offset addp storel
        get3 +buffer.disp_start addp loadl over +buffer.disp_start addp storel
        get3 +buffer.linum addp loadl over +buffer.linum addp storel
        get3 +buffer.dslinum addp loadl over +buffer.dslinum addp storel
        get3 +buffer.max_dispchars addp loadui swap +buffer.max_dispchars addp storeui

        pushp get_command_character jmp

  :task_z
    pop

    pushp get_buf_ptr call write3

      :task_z_loop_until_space
        get3 dup +buffer.offset addp loadl swap +buffer.size addp loadl pushp get_command_character jeq
        get3 dup +buffer.buf_contents addp loadp swap +buffer.offset addp loadl swap addp loadc pushc '\n' pushp task_z_loop_until_space_is_newline jeq
        pushp task_z_loop_until_space_continue jmp

        :task_z_loop_until_space_is_newline
          get3 +buffer.linum addp loadl pushl L_MAX pushp too_many_newlines jeq
          get3 +buffer.linum addp dup loadl pushi 1 addl swap storel

        :task_z_loop_until_space_continue
          get3 +buffer.offset addp dup loadl pushi 1 addl swap storel
          get3 dup +buffer.offset addp loadl swap +buffer.buf_contents addp loadp addp
          loadc pushp isspace call pushp get_command_character jnz
          pushp task_z_loop_until_space jmp

  :task_n
    pop

    pushp get_buf_ptr call write3

    :task_n_loop_until_newline
      get3 dup +buffer.offset addp loadl swap +buffer.size addp loadl pushp get_command_character jeq
      get3 dup +buffer.buf_contents addp loadp swap +buffer.offset addp loadl swap addp loadc pushc '\n' pushp task_n_loop_until_newline_is_newline jeq
      pushp task_n_loop_until_newline_continue jmp

      :task_n_loop_until_newline_is_newline
        get3 +buffer.linum addp loadl pushl L_MAX pushp too_many_newlines jeq
        get3 +buffer.linum addp dup loadl pushi 1 addl swap storel

      :task_n_loop_until_newline_continue
        get3 +buffer.offset addp dup loadl pushi 1 addl swap storel
        get3 dup +buffer.offset addp loadl swap +buffer.buf_contents addp loadp addp
        loadc pushc '\n' pushp get_command_character jeq
        pushp task_n_loop_until_newline jmp

  :task_colon
    pop

    pushp get_buf_ptr call dup +buffer.buf_contents addp loadp
    swap +buffer.offset addp loadl write3

    pushp inc_buf call
    pushp get_buf_ptr call +buffer.buf_contents addp dup loadp pushp flush call

    get3
    pushp aseg call
    get0 pushp task_colon_allocation_failure jnz ;check if the allocation was successful

    over storep

    ;src dest_a

    loadp

    over over swap ;src dest -- src dest dest src
    get3
    pushp memcpy call

    swap pop ;src dest -- dest

    pushl BUF_SIZE pushi 1 addl
    pushp aseg call ;allocate a buffer of size BUF_SIZE bytes
    ;we will be using this to read stdin in chunks
    get0 pushp task_colon_allocation_failure_2 jnz ;check if the allocation was successful

    :task_colon_read_stdin_loop
      pushl BUF_SIZE
      over
      pushp getstr call
      get0 dup pushi EOF pushp task_colon_stdin_read_failure jeq
      write4 ;store the size of the chunk we just read in block 4

      get3 pushl L_MAX subl get4 pushp stdin_read_too_large jgt

      swap ;dest src -- src dest
      get4 get3 addl ;add the size of the buffer to the size of the chunk we just read
      swap pushp rseg call
      get0 pushp task_colon_allocation_failure_3 jnz ;check if reallocation was successful

      over over ;src dest -- src dest src dest
      get3 swap addp ;this is equivalent to evaluating &buf[block_3] in C

      swap ;src dest -- dest src
      get4
      pushp memcpy call

      get3 get4 addl write3 ;add the size of the chunk read to the size of the buffer

      swap ;src dest -- dest src

      get4 pushl BUF_SIZE pushp update_buffers jgt ;if the number of items read was <= BUF_SIZE, that means that we just read the last chunk from stdin
      pushp task_colon_read_stdin_loop jmp

    :update_buffers
      pushp flush call

      pushp get_buf_ptr call write4
      get4 +buffer.buf_contents addp storep

      pushp dec_buf call pushp get_buf_ptr call

      dup dup +buffer.offset addp loadl swap +buffer.size addp loadl subl pushl L_MAX subl get3 pushp buffer_too_large jgt

      dup dup +buffer.offset addp loadl swap +buffer.size addp loadl subl get3 addl get4 +buffer.buf_contents addp loadp pushp rseg call
      get4 +buffer.buf_contents addp storep

      get0 pushp task_colon_allocation_failure_4 jnz ;check if reallocation was successful

      get4 +buffer.buf_contents addp loadp get3 swap addp
      over dup dup +buffer.buf_contents addp loadp swap +buffer.offset addp loadl swap addp
      swap dup +buffer.offset addp loadl swap +buffer.size addp loadl subl
      pushp memcpy call

      dup dup +buffer.offset addp loadl swap +buffer.size addp loadl subl get3 addl get4 +buffer.size addp storel
      dup +buffer.disp_start addp loadl get4 +buffer.disp_start addp storel
      dup +buffer.linum addp loadl get4 +buffer.linum addp storel
      dup +buffer.dslinum addp loadl get4 +buffer.dslinum addp storel
      dup +buffer.max_dispchars addp loadui get4 +buffer.max_dispchars addp storeui
      get3 get4 +buffer.offset addp storel

      pushp inc_buf call

      pop

      pushp get_command_character jmp

:get_integer_from_stdin
  write3
  pushi 0

  :get_integer_from_stdin_loop
    pushp getchar call
    get0 pushi EOF pushp task_colon_stdin_read_failure_2 jeq
    dup pushi EOF pushp get_integer_from_stdin_end jeq

    pushc '0' over pushp maybe_integer jge
    pushp get_integer_from_stdin_end jmp

    :maybe_integer
      pushc '9' over pushp is_integer jle
      pushp get_integer_from_stdin_end jmp

      :is_integer
        pushc '0' swap subi
        swap pushi 10 mull
        addl
        pushp get_integer_from_stdin_loop jmp

    :get_integer_from_stdin_end
    get3
  ret
